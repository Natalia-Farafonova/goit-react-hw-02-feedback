{"version":3,"sources":["Сomponents/Section/Section.js","Сomponents/Statistics/Statistics.js","Сomponents/FeedbackOptions/FeedbackOptions.js","Сomponents/Notification/Notification.js","App.js","index.js"],"names":["Section","title","children","Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","options","onLeaveFeedback","map","option","onClick","Notification","message","App","state","handleIncrement","setState","prevState","Object","values","this","reduce","acc","value","countTotalFeedback","percentage","Math","round","stateName","keys","percent","countPositiveFeedbackPercentage","console","log","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQAgBeA,MAdf,SAASA,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,eAACF,EAAD,WACE,6BAAKC,IACJC,MCgBQC,MApBf,YAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC/C,OACE,+BACE,wCAAWJ,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,qDAAwBC,EAAxB,WCUSC,MAjBf,YAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAClC,OACE,8BACGD,EAAQE,KAAI,SAAAC,GAAM,OACjB,wBAAqBC,QAAS,kBAAMH,EAAgBE,IAApD,SACGA,GADUA,SCINE,MARf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OAAO,4BAAIA,KCMNC,E,4MACLC,MAAQ,CACNd,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPa,gBAAkB,SAAAN,GAChB,EAAKO,UAAS,SAAAC,GACZ,OAAO,eAAGR,EAASQ,EAAUR,GAAU,O,wDAI3C,WAEE,OADmBS,OAAOC,OAAOC,KAAKN,OACpBO,QAAO,SAACC,EAAKC,GAAN,OAAgBD,EAAMC,O,6CAGjD,WACE,IAAMA,EAAQH,KAAKI,qBACbC,EAAaC,KAAKC,MAAOP,KAAKN,MAAMd,KAAOuB,EAAS,KAE1D,OAAKE,GAAmB,I,oBAI1B,WACE,MAA+BL,KAAKN,MAA5Bd,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACjB0B,EAAYV,OAAOW,KAAKT,KAAKN,OAC7BS,EAAQH,KAAKI,qBACbM,EAAUV,KAAKW,kCAIrB,OAFAC,QAAQC,IAAIV,GAGV,gCACE,cAAC,EAAD,CAAS1B,MAAM,wBAAf,SACE,cAAC,EAAD,CACES,QAASsB,EACTrB,gBAAiBa,KAAKL,oBAI1B,cAAC,EAAD,CAASlB,MAAM,aAAf,SACa,IAAV0B,EACC,cAAC,EAAD,CAAcX,QAAQ,sBAEtB,cAAC,EAAD,CACEZ,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOoB,EACPnB,mBAAoB0B,a,GApDfI,aA6DJrB,IC/DfsB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.2c805939.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nfunction Section({ title, children }) {\n  return (\n    <Section>\n      <h2>{title}</h2>\n      {children}\n    </Section>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Section;\n","import PropTypes from 'prop-types';\n\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\n  return (\n    <ul>\n      <li>Good: {good}</li>\n      <li>Neutral: {neutral}</li>\n      <li>Bad: {bad}</li>\n      <li>Total: {total}</li>\n      <li>Positive feedback: {positivePercentage}%</li>\n    </ul>\n  );\n}\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import PropTypes from 'prop-types';\n\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\n  return (\n    <div>\n      {options.map(option => (\n        <button key={option} onClick={() => onLeaveFeedback(option)}>\n          {option}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.array.isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import PropTypes from 'prop-types';\n\nfunction Notification({ message }) {\n  return <p>{message}</p>;\n}\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import React, { Component } from 'react';\nimport Section from './Сomponents/Section/Section';\nimport Statistics from './Сomponents/Statistics/Statistics';\nimport FeedbackOptions from './Сomponents/FeedbackOptions/FeedbackOptions';\nimport Notification from './Сomponents/Notification/Notification';\n\n\n\n\n class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleIncrement = option => {\n    this.setState(prevState => {\n      return { [option]: prevState[option] + 1 };\n    });\n  };\n\n  countTotalFeedback() {\n    const totalValue = Object.values(this.state);\n    return totalValue.reduce((acc, value) => acc + value);\n  }\n\n  countPositiveFeedbackPercentage() {\n    const value = this.countTotalFeedback();\n    const percentage = Math.round((this.state.good / value) * 100);\n\n    if (!percentage) return 0;\n    return percentage;\n  }\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const stateName = Object.keys(this.state);\n    const value = this.countTotalFeedback();\n    const percent = this.countPositiveFeedbackPercentage();\n\n    console.log(value);\n\n    return (\n      <div >\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={stateName}\n            onLeaveFeedback={this.handleIncrement}\n          />\n        </Section>\n\n        <Section title=\"Statistics\">\n          {value === 0 ? (\n            <Notification message=\"No feedback given\" />\n          ) : (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={value}\n              positivePercentage={percent}\n            />\n          )}\n        </Section>\n      </div>\n    );\n  }\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}